import redis from '../configs/redisConfig.js';
import 'dotenv/config';
import { setTimeout } from 'timers/promises';

// C√°c key Redis
const MASTERS_LIST_KEY = 'masters:list';  // Sorted set ch·ª©a c√°c master
const MASTER_HEARTBEAT_KEY = 'master:heartbeat:';  // Key ri√™ng cho heartbeat
const ACTIVE_LEADER_KEY = 'master:active:leader';  // Ch·ªâ ƒë·ªãnh r√µ ai l√† leader ƒëang ho·∫°t ƒë·ªông
const ELECTION_RUNNING_KEY = 'master:election:running'; // ƒê√°nh d·∫•u ƒëang c√≥ election
const MASTER_HEARTBEAT_INTERVAL = 3000; // 3 gi√¢y
const MASTER_TIMEOUT = 15000; // 15 gi√¢y kh√¥ng c√≥ heartbeat = die
const ELECTION_TIMEOUT = 10000; // Election t·ªëi ƒëa 10 gi√¢y

// G·ª≠i heartbeat ƒë·ªãnh k·ª≥ cho master hi·ªán t·∫°i
const sendHeartbeat = async (masterId) => {
	console.log(`üíì G·ª≠i heartbeat cho ${masterId}`);

	const intervalId = setInterval(async () => {
		try {
			// C·∫≠p nh·∫≠t heartbeat v·ªõi timestamp hi·ªán t·∫°i
			await redis.set(`${MASTER_HEARTBEAT_KEY}${masterId}`, Date.now(), 'PX', MASTER_TIMEOUT * 2);

			// C·∫≠p nh·∫≠t c·∫£ active leader key n·∫øu master n√†y l√† leader
			const currentLeader = await redis.get(ACTIVE_LEADER_KEY);
			if (currentLeader === masterId) {
				await redis.set(ACTIVE_LEADER_KEY, masterId, 'PX', MASTER_TIMEOUT * 2);
			}
		} catch (err) {
			console.error(`‚ùå L·ªói khi g·ª≠i heartbeat cho ${masterId}:`, err);
		}
	}, MASTER_HEARTBEAT_INTERVAL);

	return () => clearInterval(intervalId);
};

export const startLeaderElection = async (masterId, onBecomeLeader) => {
	console.log(`üöÄ ${masterId} kh·ªüi ƒë·ªông, b·∫Øt ƒë·∫ßu qu√° tr√¨nh election...`);
	let isLeader = false;
	let stopHeartbeat = null;
	let stopPolling = null;
	let leaderActivated = false; // ƒê√°nh d·∫•u ƒë√£ k√≠ch ho·∫°t leader callback

	try {
		// B∆∞·ªõc 1: ƒêƒÉng k√Ω master v√†o h·ªá th·ªëng
		// S·ª≠ d·ª•ng sorted set v·ªõi th·ªùi gian l√†m score ƒë·ªÉ bi·∫øt master n√†o join tr∆∞·ªõc
		await redis.zadd(MASTERS_LIST_KEY, Date.now(), masterId);

		// B∆∞·ªõc 2: Th√™m heartbeat ban ƒë·∫ßu
		await redis.set(`${MASTER_HEARTBEAT_KEY}${masterId}`, Date.now(), 'PX', MASTER_TIMEOUT * 2);

		// B·∫Øt ƒë·∫ßu g·ª≠i heartbeat ngay l·∫≠p t·ª©c
		stopHeartbeat = await sendHeartbeat(masterId);

		// B∆∞·ªõc 3: Ki·ªÉm tra c√≥ leader hi·ªán t·∫°i kh√¥ng
		const currentLeader = await redis.get(ACTIVE_LEADER_KEY);

		if (!currentLeader) {
			// Kh√¥ng c√≥ leader, ti·∫øn h√†nh ch·ªçn leader ƒë·∫ßu ti√™n
			console.log(`üîç Kh√¥ng t√¨m th·∫•y leader hi·ªán t·∫°i, ti·∫øn h√†nh ch·ªçn leader ƒë·∫ßu ti√™n...`);
			await initiateElection();
		} else {
			console.log(`üëë Leader hi·ªán t·∫°i: ${currentLeader}`);
			// N·∫øu master n√†y l√† leader (tr∆∞·ªùng h·ª£p kh·ªüi ƒë·ªông l·∫°i)
			if (currentLeader === masterId) {
				await becomeLeader();
			}
		}

		// B∆∞·ªõc 4: Kh·ªüi ƒë·ªông polling ƒë·ªÉ ki·ªÉm tra leader
		stopPolling = startLeaderPolling();

		// B∆∞·ªõc 5: ƒê·∫£m b·∫£o d·ªçn d·∫πp khi container d·ª´ng
		process.on('SIGTERM', cleanup);
		process.on('SIGINT', cleanup);

	} catch (err) {
		console.error(`‚ùå L·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o leader election:`, err);
	}

	// H√†m ti·∫øn h√†nh b·∫ßu c·ª≠
	async function initiateElection() {
		// Ki·ªÉm tra xem ƒë√£ c√≥ cu·ªôc b·∫ßu c·ª≠ n√†o ƒëang di·ªÖn ra kh√¥ng
		const electionRunning = await redis.set(ELECTION_RUNNING_KEY, masterId, 'NX', 'PX', ELECTION_TIMEOUT);

		if (electionRunning !== 'OK') {
			console.log(`‚è≥ ƒê√£ c√≥ qu√° tr√¨nh b·∫ßu c·ª≠ ƒëang di·ªÖn ra, ch·ªù k·∫øt qu·∫£...`);
			return;
		}

		try {
			console.log(`üó≥Ô∏è ${masterId} kh·ªüi x∆∞·ªõng qu√° tr√¨nh b·∫ßu c·ª≠...`);

			// L·∫•y danh s√°ch master c√≤n s·ªëng (c√≥ heartbeat)
			const allMasters = await redis.zrange(MASTERS_LIST_KEY, 0, -1);
			const liveMasters = [];

			for (const master of allMasters) {
				const heartbeat = await redis.get(`${MASTER_HEARTBEAT_KEY}${master}`);
				if (heartbeat) {
					liveMasters.push(master);
				} else {
					// X√≥a master ƒë√£ ch·∫øt
					await redis.zrem(MASTERS_LIST_KEY, master);
					console.log(`üóëÔ∏è X√≥a master kh√¥ng ho·∫°t ƒë·ªông: ${master}`);
				}
			}

			// Kh√¥ng c√≥ master n√†o c√≤n s·ªëng
			if (liveMasters.length === 0) {
				console.log(`‚ùå Kh√¥ng c√≥ master n√†o c√≤n s·ªëng, kh√¥ng th·ªÉ b·∫ßu leader`);
				return;
			}

			// Ch·ªçn master ƒë·∫ßu ti√™n (ƒëi·ªÉm th·∫•p nh·∫•t) l√†m leader
			const newLeader = liveMasters[0];
			console.log(`üëë Ch·ªçn ${newLeader} l√†m leader m·ªõi`);

			// ƒê·∫∑t leader m·ªõi v√†o Redis v·ªõi TTL
			await redis.set(ACTIVE_LEADER_KEY, newLeader, 'PX', MASTER_TIMEOUT * 2);

			// N·∫øu master n√†y l√† leader, k√≠ch ho·∫°t
			if (newLeader === masterId) {
				await becomeLeader();
			}
		} finally {
			// Lu√¥n ƒë·∫£m b·∫£o x√≥a kh√≥a election running
			await redis.del(ELECTION_RUNNING_KEY);
		}
	}

	// X·ª≠ l√Ω khi master n√†y tr·ªü th√†nh leader
	async function becomeLeader() {
		if (!isLeader) {
			console.log(`üëë ${masterId} tr·ªü th√†nh leader!`);
			isLeader = true;

			// Ch·ªâ k√≠ch ho·∫°t callback m·ªôt l·∫ßn
			if (!leaderActivated) {
				leaderActivated = true;
				onBecomeLeader(masterId);
			}
		}
	}

	// Ki·ªÉm tra tr·∫°ng th√°i leader hi·ªán t·∫°i
	async function checkLeaderStatus() {
		try {
			// L·∫•y th√¥ng tin leader hi·ªán t·∫°i
			const currentLeader = await redis.get(ACTIVE_LEADER_KEY);

			// N·∫øu master n√†y l√† leader
			if (currentLeader === masterId) {
				await becomeLeader();
				return;
			}

			// Reset tr·∫°ng th√°i n·∫øu kh√¥ng c√≤n l√† leader
			if (isLeader) {
				console.log(`‚¨áÔ∏è ${masterId} kh√¥ng c√≤n l√† leader.`);
				isLeader = false;
			}

			// N·∫øu kh√¥ng c√≥ leader ho·∫∑c leader kh√¥ng c√≤n heartbeat, b·∫Øt ƒë·∫ßu b·∫ßu c·ª≠
			if (!currentLeader) {
				console.log(`‚ö†Ô∏è Kh√¥ng c√≥ leader hi·ªán t·∫°i, c·∫ßn b·∫ßu leader m·ªõi`);
				await initiateElection();
				return;
			}

			// Ki·ªÉm tra heartbeat c·ªßa leader hi·ªán t·∫°i
			const leaderHeartbeat = await redis.get(`${MASTER_HEARTBEAT_KEY}${currentLeader}`);
			if (!leaderHeartbeat) {
				console.log(`‚ö†Ô∏è Leader ${currentLeader} kh√¥ng c√≥ heartbeat, c·∫ßn b·∫ßu leader m·ªõi`);

				// X√≥a leader kh√¥ng c√≤n ho·∫°t ƒë·ªông
				await redis.del(ACTIVE_LEADER_KEY);
				await redis.zrem(MASTERS_LIST_KEY, currentLeader);

				// Ti·∫øn h√†nh b·∫ßu c·ª≠ m·ªõi
				await initiateElection();
			} else {
				console.log(`üîç ${masterId} ƒëang standby. Leader hi·ªán t·∫°i: ${currentLeader}`);
			}
		} catch (err) {
			console.error(`‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i leader:`, err);
		}
	}

	// B·∫Øt ƒë·∫ßu polling ƒë·ªãnh k·ª≥ ƒë·ªÉ ki·ªÉm tra leader
	function startLeaderPolling() {
		console.log(`üîÑ ${masterId} b·∫Øt ƒë·∫ßu polling ƒë·ªÉ ki·ªÉm tra leader`);

		const pollInterval = setInterval(async () => {
			try {
				await checkLeaderStatus();
			} catch (err) {
				console.error(`‚ùå L·ªói trong qu√° tr√¨nh polling:`, err);
			}
		}, 5000); // Poll m·ªói 5 gi√¢y

		return () => clearInterval(pollInterval);
	}

	// H√†m d·ªçn d·∫πp khi container d·ª´ng
	async function cleanup() {
		console.log(`üßπ ${masterId} ƒëang d·ªçn d·∫πp tr∆∞·ªõc khi d·ª´ng...`);

		try {
			// D·ª´ng heartbeat v√† polling
			if (stopHeartbeat) {
				stopHeartbeat();
			}

			if (stopPolling) {
				stopPolling();
			}

			// X√≥a master kh·ªèi danh s√°ch
			await redis.zrem(MASTERS_LIST_KEY, masterId);
			await redis.del(`${MASTER_HEARTBEAT_KEY}${masterId}`);

			// N·∫øu master n√†y l√† leader, x√≥a kh·ªèi active leader ƒë·ªÉ master kh√°c ti·∫øp qu·∫£n
			const currentLeader = await redis.get(ACTIVE_LEADER_KEY);
			if (currentLeader === masterId) {
				await redis.del(ACTIVE_LEADER_KEY);
				console.log(`üëë ${masterId} ƒë√£ t·ª´ b·ªè vai tr√≤ leader`);
			}

			console.log(`üëã ${masterId} ƒë√£ d·ªçn d·∫πp xong.`);
		} catch (err) {
			console.error(`‚ùå L·ªói khi d·ªçn d·∫πp:`, err);
		}

		// Tho√°t qu√° tr√¨nh n·∫øu ƒë∆∞·ª£c g·ªçi t·ª´ handler
		if (process.listenerCount('SIGINT') > 0 || process.listenerCount('SIGTERM') > 0) {
			process.exit(0);
		}
	}

	// Tr·∫£ v·ªÅ h√†m cleanup ƒë·ªÉ c√≥ th·ªÉ g·ªçi th·ªß c√¥ng n·∫øu c·∫ßn
	return cleanup;
};

export default startLeaderElection;