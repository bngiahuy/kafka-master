import 'dotenv/config';
import kafka from '../configs/kafkaConfig.js';
import fs from 'fs';
import path from 'path';
import redis from '../configs/redisConfig.js';
import { randomUUID } from 'crypto';
import logMessage from '../utils/logger.js';
import { acquireLock, releaseLock } from '../utils/helper.js';

const producer = kafka.producer();

const BATCH_DIR = './input_ip_data';
const PROCESSED_FILES_KEY = 'processed:files'; // Key cho Redis Set
const CHECK_INTERVAL = 5000; // Ki·ªÉm tra file m·ªõi m·ªói 5 gi√¢y (5000ms)
const WORKER_POLL_INTERVAL = 100;
let isRunning = true; // Bi·∫øn c·ªù ƒë·ªÉ d·ª´ng v√≤ng l·∫∑p ch√≠nh

// --- Helper function ƒë·ªÉ ch·ªù ---
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// --- H√†m ƒë·ªçc v√† l·ªçc file m·ªõi ---
const getNewFiles = async () => {
	try {
		const allFilesInDir = fs
			.readdirSync(BATCH_DIR)
			.filter((f) => f.endsWith('.txt'));
		const processedFiles = await redis.smembers(PROCESSED_FILES_KEY);
		const processedFilesSet = new Set(processedFiles); // Chuy·ªÉn sang Set ƒë·ªÉ ki·ªÉm tra nhanh h∆°n
		const newFiles = allFilesInDir.filter(
			(file) => !processedFilesSet.has(file)
		);
		return newFiles;
	} catch (error) {
		console.error('‚ùå Error reading directory or Redis for new files:', error);
		return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
	}
};

// --- H√†m g√°n batch ch√≠nh, gi·ªù ch·∫°y trong v√≤ng l·∫∑p ---
export const startBatchAssigner = async () => {
	console.log('üöÄ Starting batch assignment loop...');
	try {
		await producer.connect();
		console.log('‚úÖ Kafka Producer connected.');
	} catch (err) {
		console.error('‚ùå Failed to connect Kafka Producer:', err);
		return; // Kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c producer
	}

	while (isRunning) {
		const batchQueue = await getNewFiles(); // L·∫•y danh s√°ch file m·ªõi c·∫ßn x·ª≠ l√Ω

		if (batchQueue.length === 0) {
			console.log(
				`üïí No new files found. Waiting ${CHECK_INTERVAL / 1000}s...`
			);
			process.stdout.write(' W '); // Waiting symbol
			await delay(CHECK_INTERVAL);
			continue; // Quay l·∫°i ƒë·∫ßu v√≤ng l·∫∑p ƒë·ªÉ ki·ªÉm tra l·∫°i
		}

		process.stdout.write('\n'); // New line when files found
		console.log(
			`üìÇ Found ${batchQueue.length} new files to process:`,
			batchQueue
		);

		// ---- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√°c file trong batchQueue hi·ªán t·∫°i ----
		while (batchQueue.length > 0 && isRunning) {
			// Th√™m ki·ªÉm tra isRunning ·ªü ƒë√¢y n·ªØa
			const currentBatchFile = batchQueue.shift(); // L·∫•y v√† x√≥a file kh·ªèi h√†ng ƒë·ª£i
			if (!currentBatchFile) continue;

			console.log(`\n‚è≥ Processing file: ${currentBatchFile}`);
			console.log('Remaining in current queue: ', batchQueue);

			const batchIdBase =
				path.basename(currentBatchFile, '.txt') || randomUUID();
			const filePath = path.join(BATCH_DIR, currentBatchFile);
			let lines;
			try {
				lines = fs
					.readFileSync(filePath, 'utf-8')
					.split('\n')
					.filter((line) => line.trim());
			} catch (err) {
				console.error(`‚ùå Error reading file ${currentBatchFile}:`, err);
				logMessage(`Error reading file ${currentBatchFile}: ${err.message}`);
				// Kh√¥ng th√™m l·∫°i v√†o Redis Set v√¨ file n√†y ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
				continue; // B·ªè qua file l·ªói n√†y trong h√†ng ƒë·ª£i hi·ªán t·∫°i
			}

			if (lines.length === 0) {
				console.warn(
					`‚ö†Ô∏è File ${currentBatchFile} is empty. Marking as processed.`
				);
				logMessage(`Skipped empty file: ${currentBatchFile}`);
				// ƒê√°nh d·∫•u file r·ªóng l√† ƒë√£ x·ª≠ l√Ω ƒë·ªÉ kh√¥ng ƒë·ªçc l·∫°i
				await redis.sadd(PROCESSED_FILES_KEY, currentBatchFile);
				continue;
			}

			// --- Logic chia chunk v√† g√°n worker (gi·ªØ nguy√™n ph·∫ßn l·ªõn) ---
			const chunkSizeRaw = await redis.get('numBatches');
			const chunkSize = parseInt(chunkSizeRaw) || 500;
			const fileChunks = [];
			for (let i = 0; i < lines.length; i += chunkSize) {
				const chunk = lines.slice(i, i + chunkSize);
				const chunkIndex = Math.floor(i / chunkSize);
				const chunkId = `${batchIdBase}_chunk_${chunkIndex}`;
				fileChunks.push({ chunkId, chunk });
			}
			console.log(`  -> Total Chunks: ${fileChunks.length}`);

			let assignedChunkCount = 0;
			const totalChunks = fileChunks.length;
			const chunksToAssign = [...fileChunks];

			let fileProcessingSuccess = true; // C·ªù ƒë√°nh d·∫•u file x·ª≠ l√Ω th√†nh c√¥ng

			while (assignedChunkCount < totalChunks && isRunning) {
				// Th√™m ki·ªÉm tra isRunning
				let chosenWorker = null;
				let lockedWorkerId = null;

				const allWorkers = await redis.hgetall('worker:status');
				const readyWorkers = Object.entries(allWorkers)
					.filter(([_, status]) => status === '1')
					.map(([id]) => id);

				if (readyWorkers.length === 0) {
					process.stdout.write('.'); // Waiting for worker
					await delay(WORKER_POLL_INTERVAL);
					if (!isRunning) break; // Tho√°t n·∫øu nh·∫≠n t√≠n hi·ªáu d·ª´ng trong l√∫c ƒë·ª£i worker
					continue;
				} else if (assignedChunkCount > 0) {
					// Ch·ªâ xu·ªëng d√≤ng n·∫øu kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu t√¨m worker cho file n√†y
					process.stdout.write('\n');
				}

				for (const workerId of readyWorkers) {
					if (!isRunning) break; // Tho√°t s·ªõm n·∫øu nh·∫≠n t√≠n hi·ªáu d·ª´ng
					try {
						if (await acquireLock(workerId, 5000)) {
							lockedWorkerId = workerId;
							const currentStatus = await redis.hget('worker:status', workerId);
							if (currentStatus === '1') {
								chosenWorker = workerId;
								console.log(`   üîí Locked worker ${chosenWorker}`);
								break;
							} else {
								console.warn(
									`   ‚ö†Ô∏è Worker ${workerId} status changed. Releasing lock.`
								);
								await releaseLock(workerId);
							}
						}
					} catch (error) {
						console.error(`Error processing worker ${workerId}:`, error);
					}
				}
				if (!isRunning) break; // Tho√°t v√≤ng l·∫∑p g√°n chunk n·∫øu nh·∫≠n t√≠n hi·ªáu d·ª´ng

				if (chosenWorker) {
					const chunkToAssign = chunksToAssign.shift();
					if (!chunkToAssign) {
						console.error('   ‚ùå Logic error: No more chunks to assign.');
						if (lockedWorkerId) await releaseLock(lockedWorkerId);
						fileProcessingSuccess = false; // ƒê√°nh d·∫•u file th·∫•t b·∫°i
						break;
					}
					const { chunkId, chunk } = chunkToAssign;

					await redis.hset('worker:status', chosenWorker, '0');
					console.log(`   üö¶ Marked worker ${chosenWorker} as busy (0)`);

					const partitionRaw = await redis.hget(
						'worker:partition',
						chosenWorker
					);
					let partitions;
					try {
						// ... (logic ki·ªÉm tra partition gi·ªØ nguy√™n) ...
						if (!partitionRaw) throw new Error('No partition info found');
						partitions = JSON.parse(partitionRaw);
						if (!Array.isArray(partitions) || partitions.length === 0) {
							throw new Error('Invalid partition list');
						}
					} catch (err) {
						console.error(
							`   ‚ùå Partition error for ${chosenWorker}: ${err.message}`
						);
						await redis.hset('worker:status', chosenWorker, '0');
						// await redis.hdel('worker:status', chosenWorker);
						// await redis.hdel('worker:partition', chosenWorker);
						// await redis.hdel('worker:batchInfo', chosenWorker);
						if (lockedWorkerId) await releaseLock(lockedWorkerId);
						console.log(
							`   üîß Reset worker ${chosenWorker} to ready (1) and released lock.`
						);
						chunksToAssign.unshift(chunkToAssign);
						chosenWorker = null;
						await delay(500);
						continue; // Th·ª≠ t√¨m worker kh√°c
					}

					// const partition = partitions[Math.floor(Math.random() * partitions.length)];
					const partition = partitions.at(0);
					try {
						console.log(
							`   üì¶ Assigning chunk ${chunkId} (${chunk.length} items) to ${chosenWorker} (partition ${partition})`
						);
						await redis.hset(
							'worker:batchInfo',
							chosenWorker,
							JSON.stringify({
								batchId: chunkId,
								total: chunk.length,
								assignedAt: Date.now(),
							})
						);
						await sendChunkToKafka(chosenWorker, chunkId, chunk, partition);
						assignedChunkCount++;
						console.log(
							`   ‚úÖ Chunk ${chunkId} sent. Assigned ${assignedChunkCount}/${totalChunks}.`
						);
					} catch (err) {
						console.error(
							`   ‚ùå Send/Assign error for chunk ${chunkId} to ${chosenWorker}:`,
							err
						);
						logMessage(
							`Failed assign/send chunk ${chunkId} to ${chosenWorker}: ${err.message}`
						);
						await redis.hset('worker:status', chosenWorker, '0');
						// await redis.hdel('worker:status', chosenWorker);
						// await redis.hdel('worker:partition', chosenWorker);
						// await redis.hdel('worker:batchInfo', chosenWorker);
						if (lockedWorkerId) await releaseLock(lockedWorkerId);
						console.log(
							`   üîß Reset worker ${chosenWorker} to ready (1) and released lock due to send error.`
						);
						chunksToAssign.unshift(chunkToAssign);
						// C√¢n nh·∫Øc d·ª´ng x·ª≠ l√Ω file n√†y n·∫øu l·ªói g·ª≠i li√™n t·ª•c
						// fileProcessingSuccess = false;
						// break;
						await delay(500); // Ch·ªù ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
					}
				} else {
					process.stdout.write('~'); // Waiting for lock
					await delay(100);
					if (!isRunning) break; // Tho√°t n·∫øu nh·∫≠n t√≠n hi·ªáu d·ª´ng trong l√∫c ƒë·ª£i lock
				}
			} // --- K·∫øt th√∫c v√≤ng l·∫∑p g√°n chunk cho file hi·ªán t·∫°i ---

			if (!isRunning) break; // Tho√°t v√≤ng l·∫∑p x·ª≠ l√Ω file n·∫øu nh·∫≠n t√≠n hi·ªáu d·ª´ng

			// --- ƒê√°nh d·∫•u file ƒë√£ x·ª≠ l√Ω v√†o Redis SET ---
			if (assignedChunkCount === totalChunks && fileProcessingSuccess) {
				try {
					await redis.sadd(PROCESSED_FILES_KEY, currentBatchFile);
					console.log(
						`üíæ Marked file "${currentBatchFile}" as processed in Redis.`
					);
					logMessage('Batch file marked as processed: ' + currentBatchFile);
				} catch (redisErr) {
					console.error(
						`‚ùå Error marking file "${currentBatchFile}" as processed in Redis:`,
						redisErr
					);
					// C√¢n nh·∫Øc: N·∫øu l·ªói ·ªü ƒë√¢y, file n√†y c√≥ th·ªÉ b·ªã x·ª≠ l√Ω l·∫°i l·∫ßn sau.
				}
			} else if (!fileProcessingSuccess) {
				console.error(
					`‚ùå File "${currentBatchFile}" processing failed. It will be retried later.`
				);
				logMessage(`File "${currentBatchFile}" processing failed. Will retry.`);
			} else {
				console.warn(
					`‚ö†Ô∏è File "${currentBatchFile}" processing interrupted. It will be retried later.`
				);
				logMessage(
					`File "${currentBatchFile}" processing interrupted. Will retry.`
				);
			}
		} // --- K·∫øt th√∫c v√≤ng l·∫∑p x·ª≠ l√Ω c√°c file trong batchQueue hi·ªán t·∫°i ---
	} // --- K·∫øt th√∫c v√≤ng l·∫∑p ch√≠nh (khi isRunning = false) ---

	console.log('üõë Batch assignment loop stopped.');
	try {
		await producer.disconnect();
		console.log('üîå Kafka Producer disconnected.');
	} catch (err) {
		console.error('‚ùå Error disconnecting Kafka Producer:', err);
	}
};

const sendChunkToKafka = async (workerId, batchId, ipList, partition) => {
	try {
		await producer.send({
			topic: process.env.KAFKA_TOPIC_NAME_MASTER,
			messages: [
				{
					key: workerId,
					partition,
					value: JSON.stringify({
						id: workerId,
						batchId: batchId,
						data: ipList,
					}),
				},
			],
		});
	} catch (err) {
		console.error(
			`   ‚ùå Kafka send error for batch ${batchId} to worker ${workerId}:`,
			err
		);
		throw err; // N√©m l·ªói ƒë·ªÉ h√†m g·ªçi x·ª≠ l√Ω
	}
};

// --- X·ª≠ l√Ω t√≠n hi·ªáu d·ª´ng ---
const handleShutdown = async (signal) => {
	console.log(`\n‚úã ${signal} received. Stopping batch assigner loop...`);
	isRunning = false;
	// Kh√¥ng c·∫ßn g·ªçi disconnect ·ªü ƒë√¢y, v√≤ng l·∫∑p s·∫Ω t·ª± tho√°t v√† disconnect
};

process.on('SIGTERM', () => handleShutdown('SIGTERM'));
process.on('SIGINT', () => handleShutdown('SIGINT')); // Ctrl+C
